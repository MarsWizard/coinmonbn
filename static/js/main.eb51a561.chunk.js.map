{"version":3,"sources":["compareView.js","App.js","reportWebVitals.js","futureCoinBasisView.js","index.js"],"names":["showContractCode","contract","contractCode","CompareView","props","state","nearContract","farContract","contractsDailySeries","nearContractDailySeries","futureWsClient","swapWsClient","console","log","setNearContract","bind","setFarContract","setContracts","nearContractCode","dataToEvents","this","setState","now","Date","sendQuery","Math","floor","period","start","end","wsClient","JSON","stringify","data","map","e","i","TimeEvent","id","m","rep","match","TimeSeries","name","columns","events","rawData","nearContractDailyChart","length","timeseries","width","timeRange","range","height","label","min","max","format","axis","series","Component","precise","x","p","Number","parseFloat","toPrecision","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FutureCoinBasisView","prices","contracts","baseAsset","asset","channels","suffix","channel","toLowerCase","push","wsUrl","join","pair","contractType","openPrices","_this","fetch","response","json","symbols","deliverySymbolsLoaded","currentSymbolContracts","stream_data","parse","symbol","ps","ct","updatePrice","k","c","updateOpenPrice","o","price","url","onMessage","handleData","value","index","rContract","compareContract","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb51a561.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, TimeEvent } from \"pondjs\";\n\nfunction showContractCode(contract){\n    if(contract == null){\n        return \"\";\n    }\n\n    return contract.contractCode;\n}\n\nclass CompareView extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            nearContract: null,\n            farContract: null,\n            contractsDailySeries: {},\n            nearContractDailySeries: null,\n        }\n\n        this.futureWsClient = props.futureWsClient;\n        this.swapWsClient = props.swapWsClient;\n        console.log(props);\n\n        this.setNearContract = this.setNearContract.bind(this);\n        this.setFarContract = this.setFarContract.bind(this);\n        this.setContracts = this.setContracts.bind(this);\n        this.nearContractCode = this.nearContractCode.bind(this);\n        this.dataToEvents = this.dataToEvents.bind(this);\n\n    }\n\n    nearContractCode(){\n        var nearContract = this.state.nearContract;\n        if(nearContract == null){\n            return \"\";\n        }\n        return nearContract.contractCode;\n    }\n\n    setNearContract(contract){\n        console.log(contract);\n        this.setState({\n            nearContract: contract\n        })\n    }\n\n    setFarContract(contract){\n        console.log(contract);\n        this.setState({\n            farContract: contract\n        })\n    }\n\n    setContracts(nearContract, farContract){\n        this.setState({\n            nearContract, \n            farContract, \n        });\n\n        var now = Date.now();\n        console.log(this.futureWsClient);\n        this.sendQuery(nearContract.contractCode, '1day', \n            Math.floor(now/1000-3600*24), \n            Math.floor(now/1000), \n            this.futureWsClient);\n    }\n\n    sendQuery(contractCode, period, start, end, wsClient){\n        var postData = JSON.stringify({\n            \"req\": `market.${contractCode}.kline.${period}`,\n            \"id\": \"id4\",\n            \"from\": start,\n            \"to\": end, \n        });\n        // wsClient.sendMessage(postData);\n    }\n\n    dataToEvents(data){\n        return data.map((e,i)=>{\n            return new TimeEvent(new Date(e.id*1000), e);\n        });\n    }\n\n    updateData(data){\n        console.log(data);\n        var rep = data.rep;\n        var m = rep.match(/market\\.([\\w\\-_]+)\\.kline\\.1day/);\n        if(m!=null){\n            var contractCode = m[1];\n            var contractsDailySeries = this.state.contractsDailySeries;\n            contractsDailySeries[contractCode] = data.data;\n\n            var nearContractDailySeries = this.state.nearContractDailySeries;\n            if(this.state.nearContract != null && contractCode == this.state.nearContract.contractCode){\n                nearContractDailySeries = new TimeSeries({\n                    name: \"near contract daily price\", \n                    columns: ['time', 'close'], \n                    events: this.dataToEvents(data.data), \n                });\n            }\n\n            \n            this.setState({\n                contractsDailySeries, \n                nearContractDailySeries\n            });\n        }\n    }\n\n    render(){\n        const rawData = this.state.contractsDailySeries[this.nearContractCode()];\n        let nearContractDailyChart = null;\n        if (rawData != null && rawData.length>0){\n            var timeseries = this.state.nearContractDailySeries;\n            nearContractDailyChart = <div>\n                <h2>{this.state.nearContract.contractCode} Close</h2>\n                <ChartContainer width={800} timeRange={timeseries.range()}>\n                    <ChartRow height=\"200\" >\n                        <YAxis\n                            id=\"price\"\n                            label=\"Price ($)\"\n                            min={0}\n                            max={timeseries.max(\"close\")}\n                            width=\"60\" format=\"$,.2f\"/>\n                        <Charts>\n                            <LineChart columns={[\"close\"]} axis=\"price\" series={timeseries}/>\n                        </Charts>\n                    </ChartRow>\n                </ChartContainer>\n            </div>\n        }\n        return <div>\n            <h2>{showContractCode(this.state.nearContract)} vs {showContractCode(this.state.farContract)}</h2>\n            {nearContractDailyChart}\n        </div>\n    }\n}\n\nexport default CompareView;","import React, { Component } from 'react';\nimport Websocket from 'react-websocket';\nimport CompareView from './compareView';\nimport { Chart } from \"react-google-charts\";\n\nfunction precise(x, p=5) {\n  return Number.parseFloat(x).toPrecision(p);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    var prices = {};\n    var future_contracts = [{\n      contract_code: \"ETH_CW\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_NW\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_CQ\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_NQ\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"BTC_CW\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_NW\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_CQ\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_NQ\", \n      symbol: \"BTC\"\n    }];\n    var baseAssets = ['BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'LUNA', 'SOL', 'DOT', 'DOGE', 'SHIB', 'LTC'];\n    var symbols = ['ETH', 'BTC'];\n    for(let symbol of symbols){\n      prices[symbol] = null;\n    }\n\n    var contractSuffixes = ['-USD', '_CW', '_NW', '_CQ', '_NQ'];\n    var contracts = [];\n    var symbolContracts = {};\n    for (let symbol of symbols){\n      var currentSymbolContracts = [];\n      for (let suffix of contractSuffixes){\n        var contract = {\n          contractCode: symbol + suffix, \n        };\n        contracts.push(contract);\n        currentSymbolContracts.push(contract);\n      }\n      symbolContracts[symbol] = currentSymbolContracts;\n    }\n\n\n    var historyData = {};\n    var currentPair = null;\n    var openPrices = {};\n    this.state = {\n      count: 90, \n      prices, \n      symbols, \n      future_contracts, \n      historyData, \n      currentPair,\n      contracts,\n      symbolContracts, \n      openPrices, \n      baseAssets, \n    };\n\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.updatePrice = this.updatePrice.bind(this);\n    this.sendMessageSwap = this.sendMessageSwap.bind(this);\n    this.queryFutureKlineData = this.queryFutureKlineData.bind(this);\n    this.onClickMarketData = this.onClickMarketData.bind(this);\n    this.compareContracts = this.compareContracts.bind(this);\n    this.updateOpenPrice = this.updateOpenPrice.bind(this);\n    this.deliverySymbolsLoaded = this.deliverySymbolsLoaded.bind(this);\n    this.subscribeDeliveryContracts = this.subscribeDeliveryContracts.bind(this);\n    this.fetchMarketData = this.fetchMarketData.bind(this);\n\n  }\n\n  queryFutureKlineData(symbol, peroid, from, to){\n    var postData = JSON.stringify({\n        \"req\": `market.${symbol}.kline.${peroid}`,\n        \"id\": \"id4\",\n        \"from\": from,\n        \"to\": to, \n    })\n\n    this.sendMessage(postData);\n    this.sendMessageSwap(postData);\n  }\n\n  onClickMarketData(){\n    console.log('onClickMarketData');\n    this.queryFutureKlineData('ETH_CQ', '1min', 0, 1);\n  }\n\n  componentDidMount() {\n    for(let symbol of this.state.symbols){\n\n    }\n\n    var _this = this;\n    fetch(\"https://dapi.binance.com/dapi/v1/exchangeInfo\")  \n      .then(response => response.json())\n      .then(function(data){\n        _this.setState({'symbols': data.symbols});\n        _this.deliverySymbolsLoaded();\n      });\n    // console.log(await response.json())\n  }\n\n  deliverySymbolsLoaded(){\n    var symbolContracts = this.state.symbolContracts;\n    var contracts = this.state.contracts;\n    var deliverContractSuffixes = ['PERPETUAL', 'CURRENT_QUARTER', 'NEXT_QUARTER'];\n\n    for(let baseAsset of this.state.baseAssets){\n      var currentSymbolContracts = [];\n      // baseAsset = baseAsset.toLowerCase();\n      for (let suffix of deliverContractSuffixes){\n        var contract = {\n          pair: baseAsset + 'USD', \n          contractCode: baseAsset + 'USD' + '_' + suffix, \n          contractType: suffix, \n        };\n        contracts.push(contract);\n        currentSymbolContracts.push(contract);\n      }\n      symbolContracts[baseAsset] = currentSymbolContracts;\n    }\n\n    this.refWebSocket.url = 'wss://dstream.binance.com/stream?streams/btcusd_210924@kline_1m/btcusd_210625@kline_1m'\n    this.refWebSocket.setupWebsocket();\n\n    // this.refWebSocket.sendMessage({\n    //   \"method\": \"SUBSCRIBE\",\n    //   \"params\":\n    //     [\n    //     \"btcusd_210924@kline_1m\",\n    //     \"btcusd_210625@kline_1m\"\n    //     ],\n    //   \"id\": 1\n    //   })\n\n    this.setState({symbolContracts});\n  }\n\n  fetchMarketData(pair, contractType, interval){\n      var url = new URL('https://dapi.binance.com/dapi/v1/continuousKlines');\n      var params = {\n          pair: pair, \n          contractType: contractType, \n          interval: interval, \n          limit: 1500\n      };\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n      return fetch(url).then(response=>response.json())\n  }\n\n  subscribeDeliveryContracts(){\n    var symbols = this.state.symbols;\n    for(let symbol of symbols){\n      var subSymbolChannel = `market.${symbol.symbol}@kline_1m`;\n      subSymbolChannel = subSymbolChannel.toLowerCase();\n      // this.refWebSocket.sendMessage(JSON.stringify({\n      //   \"method\": \"SUBSCRIBE\",\n      //   \"params\":\n      //     [\n      //       subSymbolChannel,\n      //     ],\n      //   }));\n    }\n  }\n\n  handleData(data) {\n    let msg = JSON.parse(data);\n    // console.log(msg);\n    // {\"stream\":\"btcusd_perp@kline_1m\",\"data\":{\"e\":\"kline\",\"E\":1620572682222,\"s\":\"BTCUSD_PERP\",\"k\":{\"t\":1620572640000,\"T\":1620572699999,\"s\":\"BTCUSD_PERP\",\"i\":\"1m\",\"f\":130635899,\"L\":130636190,\"o\":\"57348.5\",\"c\":\"57360.9\",\"h\":\"57369.2\",\"l\":\"57348.5\",\"v\":\"26894\",\"n\":292,\"x\":false,\"q\":\"46.88853903\",\"V\":\"10393\",\"Q\":\"18.12090536\",\"B\":\"0\"}}}\n\n    var stream_data = msg.data;\n    // if(stream_data.s === undefined){\n    //   console.log(stream_data);\n    //   return;\n    // }\n    //var symbol = stream_data.s.toLowerCase();\n    var symbol = stream_data.ps + '_' + stream_data.ct;\n    this.updatePrice(symbol, parseFloat(stream_data.k.c));\n    this.updateOpenPrice(symbol, parseFloat(stream_data.k.o));\n    //_this.updateOpenPrice(symbol, msg.tick.open);\n    // data.arrayBuffer().then(function(compressedData){\n    //   let text = pako.inflate(compressedData, {\n    //     to: 'string'\n    //   });\n    //   let msg = JSON.parse(text);\n    //   if (msg.ping) {\n    //     sendMessage(JSON.stringify({\n    //       pong: msg.ping\n    //     }));\n    //   } else if (msg.tick) {\n    //     var m = msg.ch.match(/market\\.([\\w_]+)\\.kline\\.(.*)/);\n    //     if(m){\n    //     var symbol = m[1];\n    //       // console.log(symbol);\n    //       _this.updatePrice(symbol, msg.tick.close);\n    //       if(m[2] == '1day'){\n    //         _this.updateOpenPrice(symbol, msg.tick.open);\n    //       }\n    //     }\n    //       // console.log(msg);\n    //       // handle(msg);\n    //   } \n    //   else if (msg.rep){\n    //     // var historyData = _this.state.historyData;\n    //     // historyData[msg.rep] = msg.data;\n    //     // _this.setState({'historyData': historyData});\n    //     if(_this.compareView != null){\n    //       _this.compareView.updateData(msg);\n    //     }\n    //     //console.log(msg);\n    //   }\n    //   else {\n    //       //console.log(text);\n    //   }\n    // });\n  }\n\n  updatePrice(symbol, price){\n    var prices = this.state.prices;\n    prices[symbol] = price;\n    this.setState({prices});\n  }\n\n  subscribe(){\n    for (let symbol of this.state.symbols) {\n      for (let period of ['CW', 'NW', 'CQ', 'NQ']){\n        this.sendMessage(JSON.stringify({\n            \"sub\": `market.${symbol}_${period}.kline.1day`,\n            \"id\": `${symbol}_${period}`\n        }));\n      }\n    }\n  }\n\n  handleOpen(){\n    // this.subscribe();\n    this.subscribeDeliveryContracts();\n  }\n\n  sendMessage(message){\n    this.refWebSocket.sendMessage(message);\n  }\n\n  handleSwapOpen(){\n    var symbols = new Set();\n    for(let contract of this.state.future_contracts){\n      symbols.add(contract.symbol);\n    }\n\n    for(let symbol of symbols){\n      var swap_contract_code = `${symbol}-USD`;\n      var sub = `market.${swap_contract_code}.kline.1day`;\n      this.sendMessageSwap(JSON.stringify({\n        sub: sub\n      }));\n    }\n  }\n\n  sendMessageSwap(message){\n    this.ws_swap.sendMessage(message);\n  }\n\n  updateOpenPrice(symbol, price){\n    var openPrices = this.state.openPrices;\n    openPrices[symbol] = price;\n    this.setState({openPrices});\n  }\n\n  compareContracts(newContract, farContract){\n    var view = this;\n    var leftHistoricalData = null;\n    var rightHistoricalData = null;\n    this.fetchMarketData(newContract.pair, newContract.contractType, '5m')\n    .then(data => leftHistoricalData = data)\n    .then(()=> {return new Promise(resolve => setTimeout(() => resolve(), 1000));})\n    .then(()=>{return this.fetchMarketData(farContract.pair, farContract.contractType, '5m')})\n    .then(data => rightHistoricalData = data)\n    .then(function(){\n        var data = leftHistoricalData;\n            const chartData = [[\n                'Currency Name', \n                //'Currency Rate', \n                //'xxx', \n                'rate'\n            ]]\n            for (let i = 0; i < data.length; i += 1) {\n                chartData.push([\n                    new Date(data[i][0]), \n                    //parseFloat(data[i][4]), \n                    //parseFloat(rightHistoricalData[i][4]), \n                    parseFloat(data[i][4]) / parseFloat(rightHistoricalData[i][4]), \n                ]);\n            };\n            // var historyData = google.visualization.arrayToDataTable(chartData);\n            view.setState({historyData: chartData})\n            //view.setState({historyData: historyData});\n    });\n    // this.compareView.setNearContract(newContract);\n    // this.compareView.setFarContract(farContract);\n    // this.compareView.setContracts(newContract, farContract);\n    // var now = Date.now();\n    // var dailyStartTime = Math.floor(now / 1000 - 3600 * 24 * 14);\n    // var daylyEndTime = Math.floor(now / 1000);\n    // this.queryFutureKlineData(newContract.contractCode, '1day', dailyStartTime, daylyEndTime);\n    // this.queryFutureKlineData(farContract.contractCode, '1day', dailyStartTime, daylyEndTime);\n  }\n  \n  render() {\n    var symbols = this.state.symbols;\n    var future_contracts = this.state.future_contracts;\n    var symbolContracts = this.state.symbolContracts;\n\n    var channels = [];\n    for (let baseAsset of this.state.baseAssets) {\n      for(let suffix of [\"perpetual\", \"next_quarter\", \"current_quarter\"]){\n        var channel = `${baseAsset.toLowerCase()}usd_${suffix}@continuousKline_1d`;\n        channels.push(channel);\n      }\n    }\n\n    \n\n    var strChannels = channels.join('/');\n    // console.log(strChannels);\n    \n    //const refWebSocket = <Websocket url='wss://dstream.binance.com/stream?streams=btcusd_perp@kline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    //const refWebSocket = <Websocket url='wss://dstream.binance.com/stream?streams=btcusd_perpetual@continuousKline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    var wsUrl = 'wss://dstream.binance.com/stream?streams=' + strChannels\n    //var wsUrl = 'wss://dstream.binance.com/stream?streams=btcusd_perpetual@continuousKline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    const refWebSocket = <Websocket url={wsUrl} \n      onMessage={this.handleData.bind(this)} debug={true}\n      onOpen={this.handleOpen.bind(this)} \n      ref={Websocket => {\n        this.refWebSocket = Websocket;\n      }}/>\n    return (\n      <div>\n        {Object.keys(symbolContracts).map((key, index) => {\n          return <table symbol={key}>\n            <thead>\n              <tr>\n                <td></td>\n                <td></td>\n                {symbolContracts[key].map((value, index) => {\n                  return <td key={value.contractCode}>{value.contractCode}</td>\n                })}\n              </tr>\n            </thead>\n            <tbody>\n              {symbolContracts[key].map((value, index) => {\n                return <tr key={value.contract}>\n                  <td>{value.contractCode}</td>\n                  <td>\n                    {precise(this.state.prices[value.contractCode])}\n                    ({precise((this.state.prices[value.contractCode]/this.state.openPrices[value.contractCode]-1)*100, 3)}%)</td>\n                  {symbolContracts[key].map((compareContract, index) => {\n                    return <td key={\"CC\"+key+compareContract.contractCode} onClick={() => this.compareContracts(value, compareContract)}>\n                      {(this.state.prices[value.contractCode] - this.state.prices[compareContract.contractCode]).toFixed(4)}\n                      ({(this.state.prices[value.contractCode] / this.state.prices[compareContract.contractCode]).toFixed(4)})\n                      \n                    </td>\n                  })}\n                </tr>\n              })}\n            </tbody>\n          </table>\n        })}\n        {refWebSocket}\n        <CompareView ref={compareView => this.compareView=compareView} \n          futureWsClient={refWebSocket} \n          swapWsClient={this.ws_swap} />\n          <Chart\n  width={'600px'}\n  height={'400px'}\n  chartType=\"LineChart\"\n  loader={<div>Loading Chart</div>}\n  data={this.state.historyData}\n  options={{\n    hAxis: {\n      title: 'Time',\n    },\n    vAxis: {\n      title: 'Popularity',\n    },\n  }}\n  rootProps={{ 'data-testid': '1' }}\n/>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react';\nimport Websocket from 'react-websocket';\n\nfunction precise(x, p = 5) {\n  return Number.parseFloat(x).toPrecision(p);\n}\n\nexport default class FutureCoinBasisView extends Component {\n  constructor(props) {\n    super(props);\n    var prices = {};\n    var openPrices = {};\n    var contracts = [];\n    var baseAsset = this.props.asset;\n    var channels = [];\n    for (let suffix of [\"perpetual\", \"next_quarter\", \"current_quarter\"]) {\n      var channel = `${baseAsset.toLowerCase()}usd_${suffix}@continuousKline_1d`;\n      channels.push(channel);\n    }\n    var strChannels = channels.join('/');\n    var wsUrl = 'wss://dstream.binance.com/stream?streams=' + strChannels;\n\n    var deliverContractSuffixes = ['PERPETUAL', 'CURRENT_QUARTER', 'NEXT_QUARTER'];\n\n    for (let suffix of deliverContractSuffixes) {\n      var contract = {\n        pair: baseAsset + 'USD',\n        contractCode: `${baseAsset}USD_${suffix}`,\n        contractType: suffix,\n      };\n      contracts.push(contract);\n      prices[contract] = null;\n    }\n\n    this.state = {\n      asset: props.asset,\n      openPrices,\n      prices,\n      contracts,\n      wsUrl,\n    }\n  };\n\n  componentDidMount() {\n    var _this = this;\n    fetch(\"https://dapi.binance.com/dapi/v1/exchangeInfo\")\n      .then(response => response.json())\n      .then(function (data) {\n        _this.setState({ 'symbols': data.symbols });\n        _this.deliverySymbolsLoaded();\n      });\n  }\n\n  deliverySymbolsLoaded() {\n    var symbolContracts = {};\n    var contracts = [];\n    var deliverContractSuffixes = ['PERPETUAL', 'CURRENT_QUARTER', 'NEXT_QUARTER'];\n\n    var baseAsset = this.state.asset;\n    var currentSymbolContracts = [];\n    for (let suffix of deliverContractSuffixes) {\n      var contract = {\n        pair: baseAsset + 'USD',\n        contractCode: `${baseAsset}USD_${suffix}`,\n        contractType: suffix,\n      };\n      contracts.push(contract);\n      currentSymbolContracts.push(contract);\n    }\n    symbolContracts[baseAsset] = currentSymbolContracts;\n\n    // this.setState({ symbolContracts });\n  }\n\n  handleData(data) {\n    let msg = JSON.parse(data);\n    var stream_data = msg.data;\n    var symbol = stream_data.ps + '_' + stream_data.ct;\n    this.updatePrice(symbol, parseFloat(stream_data.k.c));\n    this.updateOpenPrice(symbol, parseFloat(stream_data.k.o));\n  }\n\n  updatePrice(symbol, price) {\n    var prices = this.state.prices;\n    prices[symbol] = price;\n\n    this.setState({ prices });\n  }\n\n  updateOpenPrice(symbol, price) {\n    var openPrices = this.state.openPrices;\n    openPrices[symbol] = price;\n    this.setState({ openPrices });\n  }\n\n  render() {\n    const { contracts, prices, openPrices } = this.state;\n\n    return (\n      <div>\n        <Websocket url={this.state.wsUrl}\n          onMessage={this.handleData.bind(this)} />\n        <table>\n          <thead>\n            <tr>\n              <td></td>\n              <td></td>\n              {contracts.map((value, index) => {\n                return <td key={\"C\" + value.contractCode}>{value.contractCode}</td>\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {contracts.map((rContract, index) => {\n              return <tr key={\"R\" + rContract.contractCode}>\n                <td>{rContract.contractCode}</td>\n                <td>\n                  {precise(prices[rContract.contractCode])}\n                  ({precise((prices[rContract.contractCode] / openPrices[rContract.contractCode] - 1) * 100, 3)}%)</td>\n                {contracts.map((compareContract, index) => {\n                  return <td key={\"CC\" + rContract.contractCode + compareContract.contractCode}>\n                    {(prices[rContract.contractCode] - prices[compareContract.contractCode]).toFixed(4)}\n                    ({(prices[rContract.contractCode] / prices[compareContract.contractCode]).toFixed(4)})\n                  </td>\n                })}\n              </tr>\n            })}\n          </tbody>\n        </table>\n      </div>\n\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport FutureCoinBasisView from './futureCoinBasisView';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <FutureCoinBasisView asset='BTC' />\n    <FutureCoinBasisView asset='ETH' />\n    <FutureCoinBasisView asset='BNB' />\n    <FutureCoinBasisView asset='XRP' />\n    <FutureCoinBasisView asset='ADA' />\n    <FutureCoinBasisView asset='LUNA' />\n    <FutureCoinBasisView asset='SOL' />\n    <FutureCoinBasisView asset='DOT' />\n    <FutureCoinBasisView asset='DOGE' />\n    <FutureCoinBasisView asset='SHIB' />\n    <FutureCoinBasisView asset='LTC' />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}