{"version":3,"sources":["compareView.js","App.js","reportWebVitals.js","index.js"],"names":["showContractCode","contract","contractCode","CompareView","props","state","nearContract","farContract","contractsDailySeries","nearContractDailySeries","futureWsClient","swapWsClient","console","log","setNearContract","bind","setFarContract","setContracts","nearContractCode","dataToEvents","this","setState","now","Date","sendQuery","Math","floor","period","start","end","wsClient","JSON","stringify","data","map","e","i","TimeEvent","id","m","rep","match","TimeSeries","name","columns","events","rawData","nearContractDailyChart","length","timeseries","width","timeRange","range","height","label","min","max","format","axis","series","Component","pako","require","precise","x","p","Number","parseFloat","toPrecision","App","prices","symbols","contractSuffixes","contracts","symbolContracts","symbol","currentSymbolContracts","push","count","future_contracts","contract_code","historyData","currentPair","openPrices","baseAssets","sendMessage","subscribe","updatePrice","sendMessageSwap","queryFutureKlineData","onClickMarketData","compareContracts","updateOpenPrice","deliverySymbolsLoaded","subscribeDeliveryContracts","peroid","from","to","postData","_this","fetch","then","response","json","deliverContractSuffixes","baseAsset","refWebSocket","url","setupWebsocket","subSymbolChannel","toLowerCase","msg","parse","stream_data","ps","ct","k","c","o","price","message","Set","add","swap_contract_code","sub","ws_swap","arrayBuffer","compressedData","text","inflate","ping","pong","tick","ch","open","close","req","compareView","updateData","newContract","dailyStartTime","daylyEndTime","channels","suffix","channel","strChannels","join","wsUrl","onMessage","handleData","debug","onOpen","handleOpen","ref","Websocket","Object","keys","key","index","value","compareContract","onClick","toFixed","handleSwapReceive","handleSwapOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.918226d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Charts, ChartContainer, ChartRow, YAxis, LineChart } from \"react-timeseries-charts\";\nimport { TimeSeries, TimeRange, TimeEvent } from \"pondjs\";\n\nfunction showContractCode(contract){\n    if(contract == null){\n        return \"\";\n    }\n\n    return contract.contractCode;\n}\n\nclass CompareView extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            nearContract: null,\n            farContract: null,\n            contractsDailySeries: {},\n            nearContractDailySeries: null,\n        }\n\n        this.futureWsClient = props.futureWsClient;\n        this.swapWsClient = props.swapWsClient;\n        console.log(props);\n\n        this.setNearContract = this.setNearContract.bind(this);\n        this.setFarContract = this.setFarContract.bind(this);\n        this.setContracts = this.setContracts.bind(this);\n        this.nearContractCode = this.nearContractCode.bind(this);\n        this.dataToEvents = this.dataToEvents.bind(this);\n\n    }\n\n    nearContractCode(){\n        var nearContract = this.state.nearContract;\n        if(nearContract == null){\n            return \"\";\n        }\n        return nearContract.contractCode;\n    }\n\n    setNearContract(contract){\n        console.log(contract);\n        this.setState({\n            nearContract: contract\n        })\n    }\n\n    setFarContract(contract){\n        console.log(contract);\n        this.setState({\n            farContract: contract\n        })\n    }\n\n    setContracts(nearContract, farContract){\n        this.setState({\n            nearContract, \n            farContract, \n        });\n\n        var now = Date.now();\n        console.log(this.futureWsClient);\n        this.sendQuery(nearContract.contractCode, '1day', \n            Math.floor(now/1000-3600*24), \n            Math.floor(now/1000), \n            this.futureWsClient);\n    }\n\n    sendQuery(contractCode, period, start, end, wsClient){\n        var postData = JSON.stringify({\n            \"req\": `market.${contractCode}.kline.${period}`,\n            \"id\": \"id4\",\n            \"from\": start,\n            \"to\": end, \n        });\n        // wsClient.sendMessage(postData);\n    }\n\n    dataToEvents(data){\n        return data.map((e,i)=>{\n            return new TimeEvent(new Date(e.id*1000), e);\n        });\n    }\n\n    updateData(data){\n        console.log(data);\n        var rep = data.rep;\n        var m = rep.match(/market\\.([\\w\\-_]+)\\.kline\\.1day/);\n        if(m!=null){\n            var contractCode = m[1];\n            var contractsDailySeries = this.state.contractsDailySeries;\n            contractsDailySeries[contractCode] = data.data;\n\n            var nearContractDailySeries = this.state.nearContractDailySeries;\n            if(this.state.nearContract != null && contractCode == this.state.nearContract.contractCode){\n                nearContractDailySeries = new TimeSeries({\n                    name: \"near contract daily price\", \n                    columns: ['time', 'close'], \n                    events: this.dataToEvents(data.data), \n                });\n            }\n\n            \n            this.setState({\n                contractsDailySeries, \n                nearContractDailySeries\n            });\n        }\n    }\n\n    render(){\n        const rawData = this.state.contractsDailySeries[this.nearContractCode()];\n        let nearContractDailyChart = null;\n        if (rawData != null && rawData.length>0){\n            var timeseries = this.state.nearContractDailySeries;\n            nearContractDailyChart = <div>\n                <h2>{this.state.nearContract.contractCode} Close</h2>\n                <ChartContainer width={800} timeRange={timeseries.range()}>\n                    <ChartRow height=\"200\" >\n                        <YAxis\n                            id=\"price\"\n                            label=\"Price ($)\"\n                            min={0}\n                            max={timeseries.max(\"close\")}\n                            width=\"60\" format=\"$,.2f\"/>\n                        <Charts>\n                            <LineChart columns={[\"close\"]} axis=\"price\" series={timeseries}/>\n                        </Charts>\n                    </ChartRow>\n                </ChartContainer>\n            </div>\n        }\n        return <div>\n            <h2>{showContractCode(this.state.nearContract)} vs {showContractCode(this.state.farContract)}</h2>\n            {nearContractDailyChart}\n        </div>\n    }\n}\n\nexport default CompareView;","import React, { Component } from 'react';\nimport Websocket from 'react-websocket';\nimport CompareView from './compareView';\nconst pako = require('pako');\n\nfunction precise(x, p=5) {\n  return Number.parseFloat(x).toPrecision(p);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    var prices = {};\n    var future_contracts = [{\n      contract_code: \"ETH_CW\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_NW\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_CQ\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"ETH_NQ\", \n      symbol: \"ETH\"\n    }, {\n      contract_code: \"BTC_CW\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_NW\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_CQ\", \n      symbol: \"BTC\"\n    }, {\n      contract_code: \"BTC_NQ\", \n      symbol: \"BTC\"\n    }];\n    var baseAssets = ['ETH', 'BTC', 'LTC'];\n    var symbols = ['ETH', 'BTC'];\n    for(let symbol of symbols){\n      prices[symbol] = null;\n    }\n\n    var contractSuffixes = ['-USD', '_CW', '_NW', '_CQ', '_NQ'];\n    var contracts = [];\n    var symbolContracts = {};\n    for (let symbol of symbols){\n      var currentSymbolContracts = [];\n      for (let suffix of contractSuffixes){\n        var contract = {\n          contractCode: symbol + suffix, \n        };\n        contracts.push(contract);\n        currentSymbolContracts.push(contract);\n      }\n      symbolContracts[symbol] = currentSymbolContracts;\n    }\n\n\n    var historyData = {};\n    var currentPair = null;\n    var openPrices = {};\n    this.state = {\n      count: 90, \n      prices, \n      symbols, \n      future_contracts, \n      historyData, \n      currentPair,\n      contracts, \n      symbolContracts, \n      openPrices, \n      baseAssets, \n    };\n\n    this.sendMessage = this.sendMessage.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.updatePrice = this.updatePrice.bind(this);\n    this.sendMessageSwap = this.sendMessageSwap.bind(this);\n    this.queryFutureKlineData = this.queryFutureKlineData.bind(this);\n    this.onClickMarketData = this.onClickMarketData.bind(this);\n    this.compareContracts = this.compareContracts.bind(this);\n    this.updateOpenPrice = this.updateOpenPrice.bind(this);\n    this.deliverySymbolsLoaded = this.deliverySymbolsLoaded.bind(this);\n    this.subscribeDeliveryContracts = this.subscribeDeliveryContracts.bind(this);\n  }\n\n  queryFutureKlineData(symbol, peroid, from, to){\n    var postData = JSON.stringify({\n        \"req\": `market.${symbol}.kline.${peroid}`,\n        \"id\": \"id4\",\n        \"from\": from,\n        \"to\": to, \n    })\n\n    this.sendMessage(postData);\n    this.sendMessageSwap(postData);\n  }\n\n  onClickMarketData(){\n    console.log('onClickMarketData');\n    this.queryFutureKlineData('ETH_CQ', '1min', 0, 1);\n  }\n\n  componentDidMount() {\n    for(let symbol of this.state.symbols){\n\n    }\n\n    var _this = this;\n    fetch(\"https://dapi.binance.com/dapi/v1/exchangeInfo\")  \n      .then(response => response.json())\n      .then(function(data){\n        _this.setState({'symbols': data.symbols});\n        _this.deliverySymbolsLoaded();\n      });\n    // console.log(await response.json())\n  }\n\n  deliverySymbolsLoaded(){\n    var symbolContracts = this.state.symbolContracts;\n    var contracts = this.state.contracts;\n    var deliverContractSuffixes = ['PERPETUAL', 'CURRENT_QUARTER', 'NEXT_QUARTER'];\n\n    for(let baseAsset of this.state.baseAssets){\n      var currentSymbolContracts = [];\n      // baseAsset = baseAsset.toLowerCase();\n      for (let suffix of deliverContractSuffixes){\n        var contract = {\n          contractCode: baseAsset + 'USD' + '_' + suffix, \n        };\n        contracts.push(contract);\n        currentSymbolContracts.push(contract);\n      }\n      symbolContracts[baseAsset] = currentSymbolContracts;\n    }\n\n    this.refWebSocket.url = 'wss://dstream.binance.com/stream?streams/btcusd_210924@kline_1m/btcusd_210625@kline_1m'\n    this.refWebSocket.setupWebsocket();\n\n    // this.refWebSocket.sendMessage({\n    //   \"method\": \"SUBSCRIBE\",\n    //   \"params\":\n    //     [\n    //     \"btcusd_210924@kline_1m\",\n    //     \"btcusd_210625@kline_1m\"\n    //     ],\n    //   \"id\": 1\n    //   })\n\n    this.setState({symbolContracts});\n  }\n\n  subscribeDeliveryContracts(){\n    var symbols = this.state.symbols;\n    for(let symbol of symbols){\n      var subSymbolChannel = `market.${symbol.symbol}@kline_1m`;\n      subSymbolChannel = subSymbolChannel.toLowerCase();\n      // this.refWebSocket.sendMessage(JSON.stringify({\n      //   \"method\": \"SUBSCRIBE\",\n      //   \"params\":\n      //     [\n      //       subSymbolChannel,\n      //     ],\n      //   }));\n    }\n  }\n\n  handleData(data) {\n    let msg = JSON.parse(data);\n    console.log(msg);\n    // {\"stream\":\"btcusd_perp@kline_1m\",\"data\":{\"e\":\"kline\",\"E\":1620572682222,\"s\":\"BTCUSD_PERP\",\"k\":{\"t\":1620572640000,\"T\":1620572699999,\"s\":\"BTCUSD_PERP\",\"i\":\"1m\",\"f\":130635899,\"L\":130636190,\"o\":\"57348.5\",\"c\":\"57360.9\",\"h\":\"57369.2\",\"l\":\"57348.5\",\"v\":\"26894\",\"n\":292,\"x\":false,\"q\":\"46.88853903\",\"V\":\"10393\",\"Q\":\"18.12090536\",\"B\":\"0\"}}}\n\n    var stream_data = msg.data;\n    // if(stream_data.s === undefined){\n    //   console.log(stream_data);\n    //   return;\n    // }\n    //var symbol = stream_data.s.toLowerCase();\n    var symbol = stream_data.ps + '_' + stream_data.ct;\n    this.updatePrice(symbol, parseFloat(stream_data.k.c));\n    this.updateOpenPrice(symbol, parseFloat(stream_data.k.o));\n    //_this.updateOpenPrice(symbol, msg.tick.open);\n    // data.arrayBuffer().then(function(compressedData){\n    //   let text = pako.inflate(compressedData, {\n    //     to: 'string'\n    //   });\n    //   let msg = JSON.parse(text);\n    //   if (msg.ping) {\n    //     sendMessage(JSON.stringify({\n    //       pong: msg.ping\n    //     }));\n    //   } else if (msg.tick) {\n    //     var m = msg.ch.match(/market\\.([\\w_]+)\\.kline\\.(.*)/);\n    //     if(m){\n    //     var symbol = m[1];\n    //       // console.log(symbol);\n    //       _this.updatePrice(symbol, msg.tick.close);\n    //       if(m[2] == '1day'){\n    //         _this.updateOpenPrice(symbol, msg.tick.open);\n    //       }\n    //     }\n    //       // console.log(msg);\n    //       // handle(msg);\n    //   } \n    //   else if (msg.rep){\n    //     // var historyData = _this.state.historyData;\n    //     // historyData[msg.rep] = msg.data;\n    //     // _this.setState({'historyData': historyData});\n    //     if(_this.compareView != null){\n    //       _this.compareView.updateData(msg);\n    //     }\n    //     //console.log(msg);\n    //   }\n    //   else {\n    //       //console.log(text);\n    //   }\n    // });\n  }\n\n  updatePrice(symbol, price){\n    var prices = this.state.prices;\n    prices[symbol] = price;\n    this.setState({prices});\n  }\n\n  subscribe(){\n    for (let symbol of this.state.symbols) {\n      for (let period of ['CW', 'NW', 'CQ', 'NQ']){\n        this.sendMessage(JSON.stringify({\n            \"sub\": `market.${symbol}_${period}.kline.1day`,\n            \"id\": `${symbol}_${period}`\n        }));\n      }\n    }\n  }\n\n  handleOpen(){\n    // this.subscribe();\n    this.subscribeDeliveryContracts();\n  }\n\n  sendMessage(message){\n    this.refWebSocket.sendMessage(message);\n  }\n\n  handleSwapOpen(){\n    var symbols = new Set();\n    for(let contract of this.state.future_contracts){\n      symbols.add(contract.symbol);\n    }\n\n    for(let symbol of symbols){\n      var swap_contract_code = `${symbol}-USD`;\n      var sub = `market.${swap_contract_code}.kline.1day`;\n      this.sendMessageSwap(JSON.stringify({\n        sub: sub\n      }));\n    }\n  }\n\n  sendMessageSwap(message){\n    this.ws_swap.sendMessage(message);\n  }\n\n  updateOpenPrice(symbol, price){\n    var openPrices = this.state.openPrices;\n    openPrices[symbol] = price;\n    this.setState({openPrices});\n  }\n\n  handleSwapReceive(data){\n    var _this = this;\n    data.arrayBuffer().then(function(compressedData){\n      let text = pako.inflate(compressedData, {\n        to: 'string'\n      });\n      let msg = JSON.parse(text);\n      if (msg.ping) {\n        _this.sendMessageSwap(JSON.stringify({\n          pong: msg.ping\n        }));\n      } else if (msg.tick) {\n        var m = msg.ch.match(/market\\.(([\\w]+)\\-([\\w+]+))\\.kline\\.(.*)/);\n        if(m){\n          var symbol = m[2];\n          var contractCode = m[1];\n          //console.log(symbol);\n          if(m[4] == '1day'){\n            _this.updateOpenPrice(contractCode, msg.tick.open);\n          }\n          _this.updatePrice(symbol, msg.tick.close);\n          _this.updatePrice(contractCode, msg.tick.close);\n        }\n          //console.log(msg);\n          // handle(msg);\n      else if (msg.req){\n        _this.compareView.updateData(msg);\n      }\n      } else {\n          //console.log(text);\n      }\n    });\n  }\n\n  compareContracts(newContract, farContract){\n    console.log(newContract + ' vs ' + farContract);\n    // this.compareView.setNearContract(newContract);\n    // this.compareView.setFarContract(farContract);\n    this.compareView.setContracts(newContract, farContract);\n    var now = Date.now();\n    var dailyStartTime = Math.floor(now / 1000 - 3600 * 24 * 14);\n    var daylyEndTime = Math.floor(now / 1000);\n    this.queryFutureKlineData(newContract.contractCode, '1day', dailyStartTime, daylyEndTime);\n    this.queryFutureKlineData(farContract.contractCode, '1day', dailyStartTime, daylyEndTime);\n  }\n  \n  render() {\n    var symbols = this.state.symbols;\n    var future_contracts = this.state.future_contracts;\n    var symbolContracts = this.state.symbolContracts;\n\n    var channels = [];\n    for (let baseAsset of this.state.baseAssets) {\n      for(let suffix of [\"perpetual\", \"next_quarter\", \"current_quarter\"]){\n        var channel = `${baseAsset.toLowerCase()}usd_${suffix}@continuousKline_1d`;\n        channels.push(channel);\n      }\n    }\n\n    var strChannels = channels.join('/');\n    console.log(strChannels);\n    \n    //const refWebSocket = <Websocket url='wss://dstream.binance.com/stream?streams=btcusd_perp@kline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    //const refWebSocket = <Websocket url='wss://dstream.binance.com/stream?streams=btcusd_perpetual@continuousKline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    var wsUrl = 'wss://dstream.binance.com/stream?streams=' + strChannels\n    //var wsUrl = 'wss://dstream.binance.com/stream?streams=btcusd_perpetual@continuousKline_1m/btcusd_next_quarter@continuousKline_1m/btcusd_current_quarter@continuousKline_1m'\n    const refWebSocket = <Websocket url={wsUrl} \n      onMessage={this.handleData.bind(this)} debug={true}\n      onOpen={this.handleOpen.bind(this)} \n      ref={Websocket => {\n        this.refWebSocket = Websocket;\n      }}/>\n    return (\n      <div>\n        {Object.keys(symbolContracts).map((key, index) => {\n          return <table symbol={key}>\n            <thead>\n              <tr>\n                <td></td>\n                <td></td>\n                {symbolContracts[key].map((value, index) => {\n                  return <td key={value.contractCode}>{value.contractCode}</td>\n                })}\n              </tr>\n            </thead>\n            <tbody>\n              {symbolContracts[key].map((value, index) => {\n                return <tr key={value.contract}>\n                  <td>{value.contractCode}</td>\n                  <td>\n                    {precise(this.state.prices[value.contractCode])}\n                    ({precise((this.state.prices[value.contractCode]/this.state.openPrices[value.contractCode]-1)*100, 3)}%)</td>\n                  {symbolContracts[key].map((compareContract, index) => {\n                    return <td onClick={() => this.compareContracts(value, compareContract)}>\n                      {(this.state.prices[value.contractCode] - this.state.prices[compareContract.contractCode]).toFixed(4)}\n                      ({(this.state.prices[value.contractCode] / this.state.prices[compareContract.contractCode]).toFixed(4)})\n                      \n                    </td>\n                  })}\n                </tr>\n              })}\n            </tbody>\n          </table>\n        })}\n        {refWebSocket}\n        <Websocket url='wss://api.btcgateway.pro/swap-ws'\n            onMessage={this.handleSwapReceive.bind(this)} debug={true}\n            onOpen={this.handleSwapOpen.bind(this)} \n            ref={Websocket => {\n              this.ws_swap = Websocket;\n            }}/>\n        <CompareView ref={compareView => this.compareView=compareView} \n          futureWsClient={refWebSocket} \n          swapWsClient={this.ws_swap} />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}